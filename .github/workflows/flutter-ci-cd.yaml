#   Flutter CI CD - GitHub Continuous Integration / Continuous Deployment Action that is triggered when someone tries to merge to release,
#   which runs all tests, analyzes the code and then signs and deploys for Android and iOS on respective VMs using GitHub Secrets.
#
#   Author: NightmindOfficial
#   Co-Author: n/a

name: Continuous Integration & Deployment

on:
  # push:
  #  branches: [ release ]
  workflow_dispatch:


env:
  FLUTTER_CHANNEL: 'stable' # 'stable', 'beta', or 'master', default to: 'stable'
  FLUTTER_VERSION: '3.3.10'
  XCODE_VERSION: '13.3.1'
  PATH_TO_AAB: 'build/app/outputs/bundle/release/app-release.aab'
  ANDROID_PACKAGE_NAME: 'de.investitacademy.linum'
  FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
  
jobs:
  code-analysis-and-testing:
    name: Code Analysis and Testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Flutter SDK
      uses: subosito/flutter-action@v2
      with:
        channel: ${{ env.FLUTTER_CHANNEL }}
        
    - name: Delete previous Builds
      run: flutter clean

    - name: Get Flutter Pub
      run: flutter pub get
    
    - name: Set up Dart Pub
      run: dart pub get
    
    - name: Analyze Flutter Code
      run: flutter analyze
    
    - name: Flutter Test
      run: flutter test

# HEADS UP - currently we don't perform integration tests at this stage.
# We should, though.


  android:
    name: Android CI / CD
    needs: code-analysis-and-testing
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
    
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Flutter SDK
      uses: subosito/flutter-action@v2
      with:
        channel: ${{ env.FLUTTER_CHANNEL }}
        # flutter-version: ${{ env.FLUTTER_VERSION }} # you can also specify exact version of flutter

    - name: Flutter doctor
      run: flutter doctor

    - name: Delete previous Builds
      run: flutter clean

    - name: Get Flutter Pub
      run: flutter pub get
    
    - name: Set up Dart Pub
      run: dart pub get

    - name: Prepare Firebase Option Configuration
      run: flutterfire configure -o lib/auth/firebase_options.dart -p linum-5d9f6 -y --platforms="android,ios"


    # - name: Prepare Java Keystore and Properties
    #   env:
    #     LINUM_KEYSTORE_FILE: ${{ secrets.LINUM_KEYSTORE_FILE }}
    #     LINUM_KEY_PROPERTIES_FILE: ${{ secrets.LINUM_KEY_PROPERTIES_FILE }}
    #   run: |
    #     echo "Convert base64 strings to files"
    #     echo "§LINUM_KEYSTORE_FILE" >> key.jks.base64
    #     echo "§LINUM_KEY_PROPERTIES_FILE" >> key.properties.base64
    #     echo "Done with base64 file creation"
    #     base64 --decode key.jks.base64 > key.jks
    #     echo "Encrypted Keystore successfully"
    #     base64 --decode key.properties.base64 > key.properties
    #     echo "Encrypted Properties successfully"
    #   working-directory: 'android/'


    # - name: Build AAB
    #   run: flutter build appbundle --release

    # - name: Upload AAB artifact 
    #   uses: actions/upload-artifact@v3
    #   with:
    #     name: release-aab
    #     path: ${{ env.PATH_TO_AAB }}

    # At this stage, we might want to automatically upload to the Play Store.
